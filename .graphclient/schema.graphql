schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Collection {
  id: String!
  ogTokenAddress: String!
  blockTimestamp: BigInt!
  tokens(skip: Int = 0, first: Int = 100, orderBy: WNFT_orderBy, orderDirection: OrderDirection, where: WNFT_filter): [WNFT!]!
}

type CollectionAdded {
  id: Bytes!
  collectionId: BigInt!
  ogTokenAddress: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input CollectionAdded_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  collectionId: BigInt
  collectionId_not: BigInt
  collectionId_gt: BigInt
  collectionId_lt: BigInt
  collectionId_gte: BigInt
  collectionId_lte: BigInt
  collectionId_in: [BigInt!]
  collectionId_not_in: [BigInt!]
  ogTokenAddress: Bytes
  ogTokenAddress_not: Bytes
  ogTokenAddress_in: [Bytes!]
  ogTokenAddress_not_in: [Bytes!]
  ogTokenAddress_contains: Bytes
  ogTokenAddress_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum CollectionAdded_orderBy {
  id
  collectionId
  ogTokenAddress
  blockNumber
  blockTimestamp
  transactionHash
}

input Collection_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  ogTokenAddress: String
  ogTokenAddress_not: String
  ogTokenAddress_gt: String
  ogTokenAddress_lt: String
  ogTokenAddress_gte: String
  ogTokenAddress_lte: String
  ogTokenAddress_in: [String!]
  ogTokenAddress_not_in: [String!]
  ogTokenAddress_contains: String
  ogTokenAddress_contains_nocase: String
  ogTokenAddress_not_contains: String
  ogTokenAddress_not_contains_nocase: String
  ogTokenAddress_starts_with: String
  ogTokenAddress_starts_with_nocase: String
  ogTokenAddress_not_starts_with: String
  ogTokenAddress_not_starts_with_nocase: String
  ogTokenAddress_ends_with: String
  ogTokenAddress_ends_with_nocase: String
  ogTokenAddress_not_ends_with: String
  ogTokenAddress_not_ends_with_nocase: String
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  tokens_: WNFT_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Collection_orderBy {
  id
  ogTokenAddress
  blockTimestamp
  tokens
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Outbid {
  id: Bytes!
  ogTokenAddress: Bytes!
  ogTokenId: BigInt!
  tokenId: BigInt!
  amount: BigInt!
  price: BigInt!
  owner: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Outbid_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  ogTokenAddress: Bytes
  ogTokenAddress_not: Bytes
  ogTokenAddress_in: [Bytes!]
  ogTokenAddress_not_in: [Bytes!]
  ogTokenAddress_contains: Bytes
  ogTokenAddress_not_contains: Bytes
  ogTokenId: BigInt
  ogTokenId_not: BigInt
  ogTokenId_gt: BigInt
  ogTokenId_lt: BigInt
  ogTokenId_gte: BigInt
  ogTokenId_lte: BigInt
  ogTokenId_in: [BigInt!]
  ogTokenId_not_in: [BigInt!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  owner: Bytes
  owner_not: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Outbid_orderBy {
  id
  ogTokenAddress
  ogTokenId
  tokenId
  amount
  price
  owner
  blockNumber
  blockTimestamp
  transactionHash
}

type Query {
  collection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collection
  collections(
    skip: Int = 0
    first: Int = 100
    orderBy: Collection_orderBy
    orderDirection: OrderDirection
    where: Collection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collection!]!
  tokenAdded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenAdded
  tokenAddeds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenAdded_orderBy
    orderDirection: OrderDirection
    where: TokenAdded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenAdded!]!
  wnft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WNFT
  wnfts(
    skip: Int = 0
    first: Int = 100
    orderBy: WNFT_orderBy
    orderDirection: OrderDirection
    where: WNFT_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WNFT!]!
  outbid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Outbid
  outbids(
    skip: Int = 0
    first: Int = 100
    orderBy: Outbid_orderBy
    orderDirection: OrderDirection
    where: Outbid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Outbid!]!
  tokenDeleted(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenDeleted
  tokenDeleteds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenDeleted_orderBy
    orderDirection: OrderDirection
    where: TokenDeleted_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDeleted!]!
  collectionAdded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollectionAdded
  collectionAddeds(
    skip: Int = 0
    first: Int = 100
    orderBy: CollectionAdded_orderBy
    orderDirection: OrderDirection
    where: CollectionAdded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollectionAdded!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  collection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collection
  collections(
    skip: Int = 0
    first: Int = 100
    orderBy: Collection_orderBy
    orderDirection: OrderDirection
    where: Collection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collection!]!
  tokenAdded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenAdded
  tokenAddeds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenAdded_orderBy
    orderDirection: OrderDirection
    where: TokenAdded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenAdded!]!
  wnft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WNFT
  wnfts(
    skip: Int = 0
    first: Int = 100
    orderBy: WNFT_orderBy
    orderDirection: OrderDirection
    where: WNFT_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WNFT!]!
  outbid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Outbid
  outbids(
    skip: Int = 0
    first: Int = 100
    orderBy: Outbid_orderBy
    orderDirection: OrderDirection
    where: Outbid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Outbid!]!
  tokenDeleted(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenDeleted
  tokenDeleteds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenDeleted_orderBy
    orderDirection: OrderDirection
    where: TokenDeleted_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDeleted!]!
  collectionAdded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollectionAdded
  collectionAddeds(
    skip: Int = 0
    first: Int = 100
    orderBy: CollectionAdded_orderBy
    orderDirection: OrderDirection
    where: CollectionAdded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollectionAdded!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type TokenAdded {
  id: Bytes!
  ogTokenAddress: Bytes!
  ogTokenId: BigInt!
  tokenId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  price: BigInt!
  minHoldPeriod: BigInt!
  transactionHash: Bytes!
}

input TokenAdded_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  ogTokenAddress: Bytes
  ogTokenAddress_not: Bytes
  ogTokenAddress_in: [Bytes!]
  ogTokenAddress_not_in: [Bytes!]
  ogTokenAddress_contains: Bytes
  ogTokenAddress_not_contains: Bytes
  ogTokenId: BigInt
  ogTokenId_not: BigInt
  ogTokenId_gt: BigInt
  ogTokenId_lt: BigInt
  ogTokenId_gte: BigInt
  ogTokenId_lte: BigInt
  ogTokenId_in: [BigInt!]
  ogTokenId_not_in: [BigInt!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  minHoldPeriod: BigInt
  minHoldPeriod_not: BigInt
  minHoldPeriod_gt: BigInt
  minHoldPeriod_lt: BigInt
  minHoldPeriod_gte: BigInt
  minHoldPeriod_lte: BigInt
  minHoldPeriod_in: [BigInt!]
  minHoldPeriod_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TokenAdded_orderBy {
  id
  ogTokenAddress
  ogTokenId
  tokenId
  blockNumber
  blockTimestamp
  price
  minHoldPeriod
  transactionHash
}

type TokenDeleted {
  id: Bytes!
  ogTokenAddress: Bytes!
  ogTokenId: BigInt!
  tokenId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input TokenDeleted_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  ogTokenAddress: Bytes
  ogTokenAddress_not: Bytes
  ogTokenAddress_in: [Bytes!]
  ogTokenAddress_not_in: [Bytes!]
  ogTokenAddress_contains: Bytes
  ogTokenAddress_not_contains: Bytes
  ogTokenId: BigInt
  ogTokenId_not: BigInt
  ogTokenId_gt: BigInt
  ogTokenId_lt: BigInt
  ogTokenId_gte: BigInt
  ogTokenId_lte: BigInt
  ogTokenId_in: [BigInt!]
  ogTokenId_not_in: [BigInt!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TokenDeleted_orderBy {
  id
  ogTokenAddress
  ogTokenId
  tokenId
  blockNumber
  blockTimestamp
  transactionHash
}

type WNFT {
  id: String!
  collection: Collection!
  ogTokenAddress: String!
  ogTokenId: BigInt!
  tokenId: BigInt!
  currentOwner: Bytes!
  lastPrice: BigInt!
  firstStakePrice: BigInt!
  minHoldPeriod: BigInt!
  blockTimestamp: BigInt!
}

input WNFT_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: Collection_filter
  ogTokenAddress: String
  ogTokenAddress_not: String
  ogTokenAddress_gt: String
  ogTokenAddress_lt: String
  ogTokenAddress_gte: String
  ogTokenAddress_lte: String
  ogTokenAddress_in: [String!]
  ogTokenAddress_not_in: [String!]
  ogTokenAddress_contains: String
  ogTokenAddress_contains_nocase: String
  ogTokenAddress_not_contains: String
  ogTokenAddress_not_contains_nocase: String
  ogTokenAddress_starts_with: String
  ogTokenAddress_starts_with_nocase: String
  ogTokenAddress_not_starts_with: String
  ogTokenAddress_not_starts_with_nocase: String
  ogTokenAddress_ends_with: String
  ogTokenAddress_ends_with_nocase: String
  ogTokenAddress_not_ends_with: String
  ogTokenAddress_not_ends_with_nocase: String
  ogTokenId: BigInt
  ogTokenId_not: BigInt
  ogTokenId_gt: BigInt
  ogTokenId_lt: BigInt
  ogTokenId_gte: BigInt
  ogTokenId_lte: BigInt
  ogTokenId_in: [BigInt!]
  ogTokenId_not_in: [BigInt!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  currentOwner: Bytes
  currentOwner_not: Bytes
  currentOwner_in: [Bytes!]
  currentOwner_not_in: [Bytes!]
  currentOwner_contains: Bytes
  currentOwner_not_contains: Bytes
  lastPrice: BigInt
  lastPrice_not: BigInt
  lastPrice_gt: BigInt
  lastPrice_lt: BigInt
  lastPrice_gte: BigInt
  lastPrice_lte: BigInt
  lastPrice_in: [BigInt!]
  lastPrice_not_in: [BigInt!]
  firstStakePrice: BigInt
  firstStakePrice_not: BigInt
  firstStakePrice_gt: BigInt
  firstStakePrice_lt: BigInt
  firstStakePrice_gte: BigInt
  firstStakePrice_lte: BigInt
  firstStakePrice_in: [BigInt!]
  firstStakePrice_not_in: [BigInt!]
  minHoldPeriod: BigInt
  minHoldPeriod_not: BigInt
  minHoldPeriod_gt: BigInt
  minHoldPeriod_lt: BigInt
  minHoldPeriod_gte: BigInt
  minHoldPeriod_lte: BigInt
  minHoldPeriod_in: [BigInt!]
  minHoldPeriod_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum WNFT_orderBy {
  id
  collection
  ogTokenAddress
  ogTokenId
  tokenId
  currentOwner
  lastPrice
  firstStakePrice
  minHoldPeriod
  blockTimestamp
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}